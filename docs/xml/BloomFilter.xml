<?xml version='1.0' encoding='utf-8'?>
<classtemplate id="BloomFilter" name="BloomFilter" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <doc>
Standard Bloom Filter

BloomFilter class implements bloom filter algorithm for solving membership problem.
</doc>
  <base access="public">
    <type name="" />
  </base>
  <templatenontypeparameter id="BloomFilter::HC" name="HC">
    <brief>Number of hash functions</brief>
    <type name="size_t" />
  </templatenontypeparameter>
  <templatenontypeparameter id="BloomFilter::MC" name="MC">
    <brief>Number of memory bits</brief>
    <type name="size_t" />
  </templatenontypeparameter>
  <templatetypeparameter id="BloomFilter::T" name="T">
    <brief>Element type which will be inserted into bloom filter</brief>
    <default>
      <type name="std::__1::string" />
    </default>
  </templatetypeparameter>
  <templatetypeparameter id="BloomFilter::S" name="S">
    <brief>Hash output size</brief>
    <default>
      <type name="uint32_t" />
    </default>
  </templatetypeparameter>
  <constructor id="BloomFilter::BloomFilter&lt;HC, MC, HF, T, S&gt;" name="BloomFilter&lt;HC, MC, HF, T, S&gt;">
    <brief>Default constructor</brief>
  </constructor>
  <method id="BloomFilter::insert" name="insert">
    <brief> insert</brief>
    <doc>Insert item into bloom filter.
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="BloomFilter::insert::item" name="item">
      <doc>the item to insert into the bloom filter.</doc>
      <type name="const T" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="BloomFilter::erase" name="erase">
    <brief> erase</brief>
    <doc>Erase is not supported in standard bloom filter. will throw an exception
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="BloomFilter::erase::item" name="item">
      <doc>the item to erase from filter.</doc>
      <type name="const T" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="BloomFilter::clear" name="clear">
    <brief> clear</brief>
    <doc>Clear filter and resets its internal memory.
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method id="BloomFilter::contains" name="contains">
    <brief> contains</brief>
    <doc>Check the item and report that it's in the filter or not.
</doc>
    <return>
      <doc>false if the item is not in the filter, true if item may be in the filter.</doc>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="BloomFilter::contains::item" name="item">
      <doc>the item to check for existence.</doc>
      <type name="const T" qualifier=" const &amp;" />
    </argument>
  </method>
</classtemplate>
